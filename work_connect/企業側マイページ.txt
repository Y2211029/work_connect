<<<<<<< HEAD
import { useEffect, useState, useMemo } from 'react';
import PropTypes from 'prop-types';
import Box from '@mui/material/Box';
import Paper from '@mui/material/Paper';
import Stack from '@mui/material/Stack';
import Typography from '@mui/material/Typography';
import { styled } from '@mui/material/styles';
import Iframe from 'react-iframe';
import axios from 'axios';
import "./Profile.css";

// Define Item styling
const Item = styled(Paper)(({ theme }) => ({
  backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',
  ...theme.typography.body2,
  padding: theme.spacing(1),
  textAlign: 'left',
  color: theme.palette.text.secondary,
  fontSize: '25px',
}));

function CreateTagElements({ itemContents }) {
  return <button className="greeting">{itemContents}</button>;
}

CreateTagElements.propTypes = {
  itemContents: PropTypes.string.isRequired,
};

// Custom hook for showing tag list
const useTagListShow = (tagName, sessionData) => {
  const [tags, setTags] = useState([]);

  useEffect(() => {
    if (sessionData && sessionData[tagName]) {
      const commaArray = sessionData[tagName].split(',');
      const devtagComponents = commaArray.map((item) => (
        <CreateTagElements key={item} itemContents={item} />
      ));
      setTags(devtagComponents);
    }
  }, [sessionData, tagName]);

  return tags;
};

const ProfileMypage = () => {
  const [sessionId, setSessionId] = useState(null);
  const [profileData, setProfileData] = useState(null);
  const [companyInformation, setCompanyInformation] = useState(null);

  useEffect(() => {
    // Get data from sessionStorage
    const dataString = sessionStorage.getItem("accountData");
    if (dataString) {
      const dataObject = JSON.parse(dataString);
      if (dataObject) {
        setSessionId(dataObject.id);
      }
    }
  }, []);

  useEffect(() => {
    const fetchData = async () => {
      if (sessionId && !profileData) {
        console.log(sessionId);
        try {
          const response = await axios.get(
            `http://localhost:8000/c_mypage/${sessionId}`
          );
          console.log(response.data);
          setProfileData(response.data.company_mypage);

          if (response.data.company_flag === 2) {
            setCompanyInformation(response.data.company_information);
          }
        } catch (error) {
          console.error("Error fetching data!", error);
        }
      }
    };
    fetchData();
  }, [sessionId, profileData]);

  const sessionData1 = useMemo(
    () => ({
      '1': '東京本社（渋谷）,横浜支社,東海支社（浜松),中部事務所（名古屋）,西日本支社（大阪）,前橋支社,札幌営業所',
    }),
    []
  );

  const sessionData2 = useMemo(
    () => ({
      '2': 'プログラマ,システムエンジニア',
    }),
    []
  );

  const tag_1 = useTagListShow('1', sessionData1);
  const tag_2 = useTagListShow('2', sessionData2);

  const {
    company_name,
    company_namecana,
    user_name,
    icon_id,
    intro,
    address,
    video_url,
    map_url,
    hp_url
  } = profileData || {};

  return (
    <Box sx={{ marginLeft: '25%', width: '50%' }}>
      <Stack spacing={3}>
        <Box>
          <Typography variant="h6">サムネイル・アイコン</Typography>
          <Item>
            <img
              src={icon_id}
              alt="サムネイル・アイコン"
            />
          </Item>
        </Box>
        <Box>
          <Typography variant="h6">企業名</Typography>
          <Item>{company_name}</Item>
        </Box>
        <Box>
          <Typography variant="h6">企業名(カタカナ)</Typography>
          <Item>{company_namecana}</Item>
        </Box>
        <Box>
          <Typography variant="h6">企業採用担当者</Typography>
          <Item>{user_name}</Item>
        </Box>
        <Box>
          <Typography variant="h6">企業概要</Typography>
          <Item>{intro}</Item>
        </Box>
        <Box>
          <Typography variant="h6">勤務地</Typography>
          <Item>{tag_1}</Item>
        </Box>
        <Box>
          <Typography variant="h6">業種</Typography>
          <Item>{tag_2}</Item>
        </Box>
        <Box>
          <Typography variant="h6">紹介動画</Typography>
          <Item>
            <Iframe
              url={video_url}
              width="100%"
              height="400px"
            />
          </Item>
        </Box>
        <Box>
          <Typography variant="h6">本社所在地</Typography>
          <Item>{address}</Item>
          <Item>
            <Iframe
              url={map_url}
              width="100%"
              height="400px"
            />
          </Item>
        </Box>
        <Box>
          <a href={hp_url} target="_blank" rel="noopener noreferrer">
            {company_name}さんのホームページはこちらから!
          </a>
        </Box>
        <Box>
          <div className="company_information">
            {company_name}さんの詳細な情報!
          </div>
        </Box>
      </Stack>

      <Box sx={{ marginTop: 2 }}>
        {companyInformation && companyInformation.length > 0 ? (
          companyInformation.map((post, index) => (
            <div key={index}>
              <table className="company_information_table">
                <th>{post.title}</th>
                <td>{post.contents}</td>
              </table>

            </div>
          ))
        ) : (
          <p>No company information available</p>
        )}
      </Box>
    </Box>
  );
};

export default ProfileMypage;
















  // ProfileUserNameが変化したとき
  useEffect(() => {
    async function GetData(ProfileUserName) {

      try {
        // Laravel側からデータを取得
        const response = await axios.get(url, {
          params: {
            ProfileUserName: ProfileUserName[0],
          },
        });
        if (response && response.data && response.data.companyList) {
          setResponseData(response.data.companyList[0]);
        } else {
          console.log("Company list data not found in the response.");
        }
        console.log("ResponseData:", response.data.companyList[0]);
        console.log("ResponseData:", response.data.companyInformation);
      } catch (err) {
        console.log("err:", err);
      }
    }
    // DBからデータを取得
    GetData(ProfileUserName);
  }, [ProfileUserName]);


    public function GetMypageController(Request $request)
    {
        try {
            // ProfileUserNameを取得
            $profileId = $request->input('ProfileUserName');

            // 学生のプロフィール取得
            $userList = w_users::where('user_name', $profileId)->get();
            Log::info('User List:', $userList->toArray());

            // 企業のプロフィール取得
            $companyList = w_company::where('user_name', $profileId)->get();
            Log::info('Company List:', $companyList->toArray());

            // データが存在する場合に応じたレスポンスを返す
            if (!$userList->isEmpty()) {
                return response()->json($userList);
            } elseif (!$companyList->isEmpty()) {
                $companyId = $companyList->first()->id;

                // 企業情報の取得
                $companyInformation = w_company_information::where('company_id', $companyId)
                    ->where('public_status', 1)
                    ->get();

                $response = [
                    'companyList' => $companyList,
                ];

                if ($companyInformation->isNotEmpty()) {
                    $response['companyInformation'] = $companyInformation;
                } else {
                    $response['companyInformation'] = '公開可能な企業情報はありません';
                }

                return response()->json($response);
            } else {
                return response()->json(['message' => 'データが見つかりません'], 404);
            }
        } catch (\Exception $e) {
            Log::error('GetMypageController: エラーが発生しました', ['error' => $e->getMessage()]);
            return response()->json(['error' => 'エラーが発生しました'], 500);
        }
    }

    public function GetMypageController(Request $request)
    {
        try {
            // ProfileUserNameを取得
            $profileId = $request->input('ProfileUserName');

            // 学生のプロフィール取得
            $userList = w_users::where('user_name', $profileId)->get();
            Log::info($userList);

            // 企業のプロフィール取得
            $companyList = w_company::where('user_name', $profileId)->get();
            Log::info($companyList);

            // データが存在する場合に応じたレスポンスを返す
            if (!$userList->isEmpty()) {
                return response()->json($userList);
            } elseif (!$companyList->isEmpty()) {
                return response()->json($companyList);
            } else {
                return response()->json(['message' => 'データが見つかりません'], 404);
            }

        } catch (\Exception $e) {
            Log::error('GetMypageController: エラーが発生しました', ['error' => $e->getMessage()]);
            return response()->json(['error' => 'エラーが発生しました'], 500);
        }
    }


  // ProfileUserNameが変化したとき
  useEffect(() => {
    async function GetData(ProfileUserName) {

      try {
        // Laravel側からデータを取得
        const response = await axios.get(url, {
          params: {
            ProfileUserName: ProfileUserName[0],
          },
        });
        if (response) {
          setResponseData(response.data[0]);
        }
        console.log("ResponseData:", response.data[0]);
      } catch (err) {
        console.log("err:", err);
      }
    }
    // DBからデータを取得
    GetData(ProfileUserName);
  }, [ProfileUserName]);

          embed: {
            class: Embed,
            config: {
              services: {
                facebook: true,
                instagram: true,
                youtube: true,
                twitter: true,
                twitch: true,
                miro: true,
                vimeo: true,
                gfycat: true,
                imgur: true,
                vine: true,
                aparat: true,
                codepen: {
                  regex: /https?:\/\/codepen.io\/([^/?&]*)\/pen\/([^/?&]*)/,
                  embeddedUrl:
                    "https://codepen.io/<%= remote_id %>?height=300&theme-id=0&default-tab=css,result&embed-version=2",
                  html: "<iframe height='300' scrolling='no' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'></iframe>",
                },
                pinterest: true,
                github: true,
                coub: true,
              },
            },
=======
import { useEffect, useState, useMemo } from 'react';
import PropTypes from 'prop-types';
import Box from '@mui/material/Box';
import Paper from '@mui/material/Paper';
import Stack from '@mui/material/Stack';
import Typography from '@mui/material/Typography';
import { styled } from '@mui/material/styles';
import Iframe from 'react-iframe';
import axios from 'axios';
import "./Profile.css";

// Define Item styling
const Item = styled(Paper)(({ theme }) => ({
  backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',
  ...theme.typography.body2,
  padding: theme.spacing(1),
  textAlign: 'left',
  color: theme.palette.text.secondary,
  fontSize: '25px',
}));

function CreateTagElements({ itemContents }) {
  return <button className="greeting">{itemContents}</button>;
}

CreateTagElements.propTypes = {
  itemContents: PropTypes.string.isRequired,
};

// Custom hook for showing tag list
const useTagListShow = (tagName, sessionData) => {
  const [tags, setTags] = useState([]);

  useEffect(() => {
    if (sessionData && sessionData[tagName]) {
      const commaArray = sessionData[tagName].split(',');
      const devtagComponents = commaArray.map((item) => (
        <CreateTagElements key={item} itemContents={item} />
      ));
      setTags(devtagComponents);
    }
  }, [sessionData, tagName]);

  return tags;
};

const ProfileMypage = () => {
  const [sessionId, setSessionId] = useState(null);
  const [profileData, setProfileData] = useState(null);
  const [companyInformation, setCompanyInformation] = useState(null);

  useEffect(() => {
    // Get data from sessionStorage
    const dataString = sessionStorage.getItem("accountData");
    if (dataString) {
      const dataObject = JSON.parse(dataString);
      if (dataObject) {
        setSessionId(dataObject.id);
      }
    }
  }, []);

  useEffect(() => {
    const fetchData = async () => {
      if (sessionId && !profileData) {
        console.log(sessionId);
        try {
          const response = await axios.get(
            `http://localhost:8000/c_mypage/${sessionId}`
          );
          console.log(response.data);
          setProfileData(response.data.company_mypage);

          if (response.data.company_flag === 2) {
            setCompanyInformation(response.data.company_information);
          }
        } catch (error) {
          console.error("Error fetching data!", error);
        }
      }
    };
    fetchData();
  }, [sessionId, profileData]);

  const sessionData1 = useMemo(
    () => ({
      '1': '東京本社（渋谷）,横浜支社,東海支社（浜松),中部事務所（名古屋）,西日本支社（大阪）,前橋支社,札幌営業所',
    }),
    []
  );

  const sessionData2 = useMemo(
    () => ({
      '2': 'プログラマ,システムエンジニア',
    }),
    []
  );

  const tag_1 = useTagListShow('1', sessionData1);
  const tag_2 = useTagListShow('2', sessionData2);

  const {
    company_name,
    company_namecana,
    user_name,
    icon_id,
    intro,
    address,
    video_url,
    map_url,
    hp_url
  } = profileData || {};

  return (
    <Box sx={{ marginLeft: '25%', width: '50%' }}>
      <Stack spacing={3}>
        <Box>
          <Typography variant="h6">サムネイル・アイコン</Typography>
          <Item>
            <img
              src={icon_id}
              alt="サムネイル・アイコン"
            />
          </Item>
        </Box>
        <Box>
          <Typography variant="h6">企業名</Typography>
          <Item>{company_name}</Item>
        </Box>
        <Box>
          <Typography variant="h6">企業名(カタカナ)</Typography>
          <Item>{company_namecana}</Item>
        </Box>
        <Box>
          <Typography variant="h6">企業採用担当者</Typography>
          <Item>{user_name}</Item>
        </Box>
        <Box>
          <Typography variant="h6">企業概要</Typography>
          <Item>{intro}</Item>
        </Box>
        <Box>
          <Typography variant="h6">勤務地</Typography>
          <Item>{tag_1}</Item>
        </Box>
        <Box>
          <Typography variant="h6">業種</Typography>
          <Item>{tag_2}</Item>
        </Box>
        <Box>
          <Typography variant="h6">紹介動画</Typography>
          <Item>
            <Iframe
              url={video_url}
              width="100%"
              height="400px"
            />
          </Item>
        </Box>
        <Box>
          <Typography variant="h6">本社所在地</Typography>
          <Item>{address}</Item>
          <Item>
            <Iframe
              url={map_url}
              width="100%"
              height="400px"
            />
          </Item>
        </Box>
        <Box>
          <a href={hp_url} target="_blank" rel="noopener noreferrer">
            {company_name}さんのホームページはこちらから!
          </a>
        </Box>
        <Box>
          <div className="company_information">
            {company_name}さんの詳細な情報!
          </div>
        </Box>
      </Stack>

      <Box sx={{ marginTop: 2 }}>
        {companyInformation && companyInformation.length > 0 ? (
          companyInformation.map((post, index) => (
            <div key={index}>
              <table className="company_information_table">
                <th>{post.title}</th>
                <td>{post.contents}</td>
              </table>

            </div>
          ))
        ) : (
          <p>No company information available</p>
        )}
      </Box>
    </Box>
  );
};

export default ProfileMypage;
















  // ProfileUserNameが変化したとき
  useEffect(() => {
    async function GetData(ProfileUserName) {

      try {
        // Laravel側からデータを取得
        const response = await axios.get(url, {
          params: {
            ProfileUserName: ProfileUserName[0],
          },
        });
        if (response && response.data && response.data.companyList) {
          setResponseData(response.data.companyList[0]);
        } else {
          console.log("Company list data not found in the response.");
        }
        console.log("ResponseData:", response.data.companyList[0]);
        console.log("ResponseData:", response.data.companyInformation);
      } catch (err) {
        console.log("err:", err);
      }
    }
    // DBからデータを取得
    GetData(ProfileUserName);
  }, [ProfileUserName]);


    public function GetMypageController(Request $request)
    {
        try {
            // ProfileUserNameを取得
            $profileId = $request->input('ProfileUserName');

            // 学生のプロフィール取得
            $userList = w_users::where('user_name', $profileId)->get();
            Log::info('User List:', $userList->toArray());

            // 企業のプロフィール取得
            $companyList = w_company::where('user_name', $profileId)->get();
            Log::info('Company List:', $companyList->toArray());

            // データが存在する場合に応じたレスポンスを返す
            if (!$userList->isEmpty()) {
                return response()->json($userList);
            } elseif (!$companyList->isEmpty()) {
                $companyId = $companyList->first()->id;

                // 企業情報の取得
                $companyInformation = w_company_information::where('company_id', $companyId)
                    ->where('public_status', 1)
                    ->get();

                $response = [
                    'companyList' => $companyList,
                ];

                if ($companyInformation->isNotEmpty()) {
                    $response['companyInformation'] = $companyInformation;
                } else {
                    $response['companyInformation'] = '公開可能な企業情報はありません';
                }

                return response()->json($response);
            } else {
                return response()->json(['message' => 'データが見つかりません'], 404);
            }
        } catch (\Exception $e) {
            Log::error('GetMypageController: エラーが発生しました', ['error' => $e->getMessage()]);
            return response()->json(['error' => 'エラーが発生しました'], 500);
        }
    }

    public function GetMypageController(Request $request)
    {
        try {
            // ProfileUserNameを取得
            $profileId = $request->input('ProfileUserName');

            // 学生のプロフィール取得
            $userList = w_users::where('user_name', $profileId)->get();
            Log::info($userList);

            // 企業のプロフィール取得
            $companyList = w_company::where('user_name', $profileId)->get();
            Log::info($companyList);

            // データが存在する場合に応じたレスポンスを返す
            if (!$userList->isEmpty()) {
                return response()->json($userList);
            } elseif (!$companyList->isEmpty()) {
                return response()->json($companyList);
            } else {
                return response()->json(['message' => 'データが見つかりません'], 404);
            }

        } catch (\Exception $e) {
            Log::error('GetMypageController: エラーが発生しました', ['error' => $e->getMessage()]);
            return response()->json(['error' => 'エラーが発生しました'], 500);
        }
    }


  // ProfileUserNameが変化したとき
  useEffect(() => {
    async function GetData(ProfileUserName) {

      try {
        // Laravel側からデータを取得
        const response = await axios.get(url, {
          params: {
            ProfileUserName: ProfileUserName[0],
          },
        });
        if (response) {
          setResponseData(response.data[0]);
        }
        console.log("ResponseData:", response.data[0]);
      } catch (err) {
        console.log("err:", err);
      }
    }
    // DBからデータを取得
    GetData(ProfileUserName);
  }, [ProfileUserName]);

          embed: {
            class: Embed,
            config: {
              services: {
                facebook: true,
                instagram: true,
                youtube: true,
                twitter: true,
                twitch: true,
                miro: true,
                vimeo: true,
                gfycat: true,
                imgur: true,
                vine: true,
                aparat: true,
                codepen: {
                  regex: /https?:\/\/codepen.io\/([^/?&]*)\/pen\/([^/?&]*)/,
                  embeddedUrl:
                    "https://codepen.io/<%= remote_id %>?height=300&theme-id=0&default-tab=css,result&embed-version=2",
                  html: "<iframe height='300' scrolling='no' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'></iframe>",
                },
                pinterest: true,
                github: true,
                coub: true,
              },
            },
>>>>>>> a8f81805d7881191f4c8b687c9cc54c98922b3f3
          },